package com.assmt.accservice;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/acc/trx") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
          // Which is auto-generated by Spring, we will use it to handle the data
    private AccountTrxRepository accountTrxRepository;
    @Autowired
    private PaginationRepository paginationRepository;
    Pageable paging = PageRequest.of(0, 20);

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewAccountTrx (@RequestParam String acc, @RequestParam String trxAmt, @RequestParam String descr,
                @RequestParam String trxDate, @RequestParam String trxTime, @RequestParam String custId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        AccountTrx n = new AccountTrx();
        n.setAcc(acc);
        n.setTrxAmt(trxAmt);
        n.setDescr(descr);
        n.setTrxDate(trxDate);
        n.setTrxTime(trxTime);
        n.setCusId(custId);
        accountTrxRepository.save(n);
        return "Saved";
    }

    @PutMapping("update/{id}")
    @Transactional
    public @ResponseBody String updateAccountTrx(@RequestBody AccountTrx acctrx, @RequestParam int id) {
        AccountTrx trx = accountTrxRepository.findById(id);
        trx.setDescr(acctrx.getDescr());
        accountTrxRepository.save(trx);
        return "Updated";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<AccountTrx> getAllAccountTrxes() {
        // This returns a JSON or XML with the users
        return accountTrxRepository.findAll();
    }

    @GetMapping(path="/getAccountTrxByCusIDAccDescr")
    public @ResponseBody Iterable<AccountTrx> getAccountTrxesByConditions(@RequestParam String cusId, @RequestParam String acc, @RequestParam String descr) {
        // This returns a JSON or XML with the users
        List<AccountTrx> acctrxList = paginationRepository.findByPrimaryLogicalCondition(cusId, acc, descr, paging);
        return acctrxList;
    }
}
